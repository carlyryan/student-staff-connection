apply plugin: 'application'

mainClassName = "web.Server"


jar {
    manifest {
        attributes(
                'Main-Class': 'web.Server'
        )
    }
}

repositories {
   jcenter()
}

dependencies {
   testImplementation group: 'junit', name: 'junit', version: '4.+'
   testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.+'
   testImplementation group: 'org.assertj', name: 'assertj-swing-junit', version: '3.+'
   implementation group: 'com.google.guava', name: 'guava', version: '28.0-jre'
   implementation group: 'com.h2database', name: 'h2', version: '1.4.+'
   implementation group: 'net.sf.oval', name: 'oval', version: '1.90'
   
   def joobyVer = '1.6.+'
    implementation group: 'org.jooby', name: 'jooby-netty', version: joobyVer
    implementation group: 'org.jooby', name: 'jooby-gson', version: joobyVer
}

run {
    standardInput = System.in
}

task createMissingSourceDirs {
	group = "Source Directories"
	description = "Create all of the missing source directories for this project."
	doFirst {
		sourceSets.each { def sourceRoot ->
			sourceRoot.allSource.srcDirTrees.each { def sourceDir ->
				if(!sourceDir.dir.exists()) {
					println "Creating ${sourceDir}"
					mkdir sourceDir.dir
				}
			}
		}
	}
}

task deleteEmptySourceDirs {
	group = "Source Directories"
	description = "Delete all empty source directories."
	doFirst {
		sourceSets.each { def sourceRoot ->
			sourceRoot.allSource.srcDirTrees.each { def sourceDir ->
				if(sourceDir.dir.exists() && sourceDir.dir.isDirectory() && sourceDir.dir.list().length == 0) {
					println "Removing empty ${sourceDir}"
					sourceDir.dir.delete()
				}
			}
		}
	}

}

sourceSets {
	web {
		resources {
			srcDirs = ['public']
		}
		java{
			srcDirs = []
		}
	}
}
